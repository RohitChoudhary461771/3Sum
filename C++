class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        int n=nums.size();
        set<vector<int>>st;
        sort(nums.begin(),nums.end());
//ðŸ‘‰ Brute Approach.-----------------------------------------------------------------------    
    T.C O(n^3 +log n) S.C O(n +n)
    /* for(int i=0;i<n;i++){
         for(int j=i+1;j<n;j++){
             for(int z=j+1;z<n;z++){
                 
                 if(nums[i]+nums[j]+nums[z]==0){
                     vector<int>ans={nums[i],nums[j],nums[z]};
                     st.insert(ans);
                 }
             }

         }
     }   
      vector<vector<int>>vec(st.begin(),st.end());
     return vec;*/
//ðŸ‘‰ Better Approach.-----------------------------------------------------------------------
 T.C O(n^2) S.C O(n+m) m-->size of second set used.
   /* for(int i=0;i<n;i++){
       unordered_set<int>hash;
        for(int j=i+1;j<n;j++){
            int third=-nums[i]-nums[j];
            if(hash.find(third)!=hash.end()){
                vector<int>temp={nums[i],nums[j],third};
                st.insert(temp);
            }
            else{
                hash.insert(nums[j]);
            }
        }
    }
      vector<vector<int>>vec(st.begin(),st.end());
        return vec;*/
//ðŸ‘‰ Optimal Approach.-----------------------------------------------------------------------
T.C O(n^2) s.c O(3)
     vector<vector<int>>ans;
        for(int i=0;i<n;i++){
            if(i>0 && nums[i]==nums[i-1])continue;
            int j=i+1;
            int k=n-1;
            while(j<k){
                int sum=nums[i]+nums[j]+nums[k];
                if(sum<0){
                    j++;
                }
                else if(sum>0)k--;
                else{
                    vector<int>temp={nums[i],nums[j],nums[k]};
                    ans.push_back(temp);
                    j++;
                    k--;
                    while(j<k && nums[j]==nums[j-1])j++;
                    while(j<k && nums[k]==nums[k+1])k--;
                }

            }

        }
    return ans;      
    }
};
